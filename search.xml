<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux命令查询网站</title>
      <link href="/2024/01/30/Linux%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2024/01/30/Linux%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>1.linux命令大全手册：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></p><p>2.linux命令大全：<a href="https://man.linuxde.net/">https://man.linuxde.net/</a></p><p>3linux命令手册：<a href="http://linux.51yip.com/">http://linux.51yip.com/</a></p><p>4linux命令大全和教程：<a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></p><p>5linux常用命令：<a href="https://www.runoob.com/w3cnote/linux-common-command-2.html">https://www.runoob.com/w3cnote/linux-common-command-2.html</a>  <a href="https://blog.csdn.net/qq_23329167/article/details/83856430">https://blog.csdn.net/qq_23329167/article/details/83856430</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less常见命令</title>
      <link href="/2024/01/30/Less%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/01/30/Less%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>在Linux系统中，使用<a href="https://www.linuxcool.com/less">less命令</a>可以查看日志文件。下面是一些常用的less命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">less filename: 查看指定文件的内容。</span><br><span class="line">/pattern: 搜索包含指定模式的文本，可以使用向上或向下箭头浏览搜索结果。</span><br><span class="line">n: 在搜索结果中跳转到下一个匹配项。</span><br><span class="line">N: 在搜索结果中跳转到上一个匹配项。</span><br><span class="line">G: 跳转到文件的最后一行。</span><br><span class="line">g: 跳转到文件的第一行。</span><br><span class="line">q: 退出less命令。</span><br><span class="line">f: 显示文件名和当前行号。</span><br><span class="line">n: 显示下一行。</span><br><span class="line">p: 显示上一行。</span><br><span class="line">u: 向上滚动一屏。</span><br><span class="line">d: 向下滚动一屏。</span><br><span class="line">b: 向上翻半屏。</span><br><span class="line">f: 向下翻半屏。</span><br><span class="line">Ctrl + f: 向下滚动一屏。</span><br><span class="line">Ctrl + b: 向上滚动一屏。</span><br><span class="line">Ctrl + d: 向下滚动半屏。</span><br><span class="line">Ctrl + u: 向上滚动半屏。</span><br><span class="line">Ctrl + g: 显示当前行号和文件名。</span><br></pre></td></tr></table></figure><p>其它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ less filename</span><br><span class="line"># 带行号打开</span><br><span class="line">$ less -N filename</span><br><span class="line"># 打开时显示行号，并跳到1000行</span><br><span class="line">$ less +1000 -N filename</span><br><span class="line">跳转到某一行，输入数字后跟g/G即可（不需要按回车）:</span><br><span class="line">1000g</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>less 命令可以用于查看大文件，比 cat 命令更加高效。</li><li>less 命令支持搜索、滚动、翻页等操作，可以方便地查找和浏览文件内容。</li><li>less 命令默认不显示行号，可以使用 <code>-N</code> 选项显示行号。</li><li>less 命令一般用于终端操作，不适用于图形界面，如果需要在图形界面中查看文件，可以使用文本编辑器或文件浏览器。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM堆中的新生代、老年代和永久代</title>
      <link href="/2024/01/08/JVM%E5%A0%86%E4%B8%AD%E7%9A%84%E6%96%B0%E7%94%9F%E4%BB%A3%E3%80%81%E8%80%81%E5%B9%B4%E4%BB%A3%E5%92%8C%E6%B0%B8%E4%B9%85%E4%BB%A3/"/>
      <url>/2024/01/08/JVM%E5%A0%86%E4%B8%AD%E7%9A%84%E6%96%B0%E7%94%9F%E4%BB%A3%E3%80%81%E8%80%81%E5%B9%B4%E4%BB%A3%E5%92%8C%E6%B0%B8%E4%B9%85%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><p>JVM中的堆分为三大部分：新生代、老年代、永久代，其大致的占比如下：</p><img src="/2024/01/08/JVM%E5%A0%86%E4%B8%AD%E7%9A%84%E6%96%B0%E7%94%9F%E4%BB%A3%E3%80%81%E8%80%81%E5%B9%B4%E4%BB%A3%E5%92%8C%E6%B0%B8%E4%B9%85%E4%BB%A3/6d78ee42d1794e179ec35f343f0ad272.png" class=""><h2 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h2><p>新生代又细分为三个区：Eden区、SurvivorFrom、ServivorTo区，三个区的默认比例为：8：1：1。<br> 大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够的空间进行分配时，虚拟机将发起一次MinorGC。在新生代中，保存着大量的刚刚创建的对象，但是大部分的对象都是朝生夕死，所以在新生代中会频繁的进行MinorGC，进行垃圾回收。</p><ul><li>Eden区：Java新创建的对象绝大部分会分配在Eden区（如果对象太大，则直接分配到老年代）。当Eden区内存不够的时候，就会触发MinorGC（新生代采用的是复制算法），对新生代进行一次垃圾回收。</li><li>SurvivorFrom区和To区：在GC开始的时候，对象只会存在于Eden区和名为From的Survivor区，To区是空的，一次MinorGc过后，Eden区和SurvivorFrom区存活的对象会移动到SurvivorTo区中，然后会清空Eden区和SurvivorFrom区，并对存活的对象的年龄+1，如果对象的年龄达到15，则直接分配到老年代。MinorGC完成后，SurvivorFrom区和SurvivorTo区的功能进行互换。下一次MinorGC时，会把SurvivorTo区和Eden区存活的对象放入SurvivorFrom区中，并计算对象存活的年龄。</li></ul><h2 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h2><p>老年代主要存放应用中生命周期长的内存对象。老年代比较稳定，不会频繁的进行MajorGC。而在MaiorGC之前才会先进行一次MinorGc，使得新生的对象进入老年代而导致空间不够才会触发。当无法找到足够大的连续空间分配给新创建的较大对象也会提前触发一次MajorGC进行垃圾回收腾出空间。<br>  在老年代中，MajorGC采用了标记—清除算法：首先扫描一次所有老年代里的对象，标记出存活的对象，然后回收没有标记的对象。MajorGC的耗时比较长。因为要扫描再回收。MajorGC会产生内存碎片，当老年代也没有内存分配给新来的对象的时候，就会抛出OOM（Out of Memory）异常。</p><h2 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h2><p>永久代指的是永久保存区域。主要存放Class和Meta（元数据）的信息。Classic在被加载的时候被放入永久区域，它和存放的实例的区域不同，在Java8中，已经被移除，取而代之的是一个称之为“元数据区”（元空间）的区域。元空间和永久代类似，都是对JVM中规范中方法的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存的限制。类的元数据放入native  memory，字符串池和类的静态变量放入java堆中。这样可以加载多少类的元数据就不再由MaxPermSize控制，而由系统的实际可用空间来控制。<br> 采用元空间而不使用永久代的原因：</p><ul><li>为了解决永久代的OOM问题，元数据和class对象存放在永久代中，容易出现性能问题和内存溢出。</li><li>类及方法的信息等比较难确定其大小，因此对于永久代大小指定比较困难，大小容易出现永久代溢出，太大容易导致老年代溢出（堆内存不变，此消彼长）</li><li>永久代会为GC带来不必要的复杂度，并且回收效率偏低。</li></ul><h2 id="MinorGC和Full-GC"><a href="#MinorGC和Full-GC" class="headerlink" title="MinorGC和Full GC"></a>MinorGC和Full GC</h2><ul><li>新生代GC（Minor GC）：指发生在新生代的垃圾收集动作，因为Java对象大多都具有朝生夕灭的特性，所以MinorGC非常频繁，一般回收速度也比较快。</li><li>老年代GC（Major GC&#x2F;Full GC）：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但是这并不是绝对的）。Major GC的速度一般会比Minor GC慢10倍以上。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架基本原理</title>
      <link href="/2024/01/08/SSM%E6%A1%86%E6%9E%B6%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2024/01/08/SSM%E6%A1%86%E6%9E%B6%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一：基本概念"><a href="#一：基本概念" class="headerlink" title="一：基本概念"></a>一：基本概念</h3><p>SSM框架是SpringMVC ，Spring和Mybatis框架的整合，是标准的MVC模式，将整个系统划分为四层：View层，Controller层，Service层，Dao层</p><ol><li>Spring运用IOC和AOP思想实现业务对象管理</li><li>SpringMVC主要负责请求的转发和视图管理</li><li>Mybatis封装JDBC作为数据对象的持久化引擎</li></ol><h3 id="二：基本原理"><a href="#二：基本原理" class="headerlink" title="二：基本原理"></a>二：基本原理</h3><h4 id="1-Spring原理"><a href="#1-Spring原理" class="headerlink" title="1. Spring原理"></a>1. Spring原理</h4><p>我们平时开发接触最多的估计就是IOC容器，它可以装载bean（也就是我们Java中的类，当然也包括service dao里面的），有了这个机制，我们就不用在每次使用这个类的时候为它初始化，很少看到关键字new。另外Spring的AOP，事务管理等等都是我们经常用到的。</p><p><strong>IOC</strong>: 所谓控制反转就是应用本身不负责依赖对象的创建及维护，依赖对象的创建及维护是由外部容器负责的。这样控制权就由应用转移到了外部容器，控制权的转移就是所谓反转，目的是为了获得更好的扩展性和良好的可维护性。</p><p><strong>AOP</strong>: 为Aspect Oriented  Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h4 id="2-SpringMVC原理"><a href="#2-SpringMVC原理" class="headerlink" title="2. SpringMVC原理"></a>2. SpringMVC原理</h4><ol><li>客户端发送请求到DispacherServlet（分发器）</li><li>由DispacherServlet分发器去查询HanderMapping（映射）并找到处理请求的Controller（控制器）</li><li>Controller调用Service业务逻辑处理后，返回ModelAndView</li><li>DispacherSerclet查询视图解析器并找到ModelAndView渲染指定的视图</li><li>视图负责将结果显示到客户端</li></ol><img src="/2024/01/08/SSM%E6%A1%86%E6%9E%B6%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/20151118190949363.png" class=""><h4 id="3-Mybatis原理"><a href="#3-Mybatis原理" class="headerlink" title="3. Mybatis原理"></a>3. Mybatis原理</h4><p>mybatis是对jdbc的封装，它让数据库底层操作变的透明。mybatis的操作都是围绕一个sqlSessionFactory实例展开的。mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库所需进行的sql语句映射。在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession，再执行sql命令。</p>]]></content>
      
      
      <categories>
          
          <category> 框架原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mybatis </tag>
            
            <tag> springMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷键大全</title>
      <link href="/2024/01/03/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
      <url>/2024/01/03/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>IDEA 中提供了很多快捷键，点击<code>File --&gt; Settings --&gt; keymap</code>便可进入看到 IDEA 提供的快捷键。我们也可以搜索和自定义所有快捷键，下面给出的是 <code>IDEA 中默认的快捷键</code>；</p></blockquote><h2 id="Ctrl相关"><a href="#Ctrl相关" class="headerlink" title="Ctrl相关"></a>Ctrl相关</h2><p>Ctrl + F 在当前文件进行文本查找 （必备）<br>Ctrl + R 在当前文件进行文本替换 （必备）<br>Ctrl + Z 撤销 （必备）<br>Ctrl + Y 删除光标所在行 或 删除选中的行 （必备）<br>Ctrl + X 剪切光标所在行 或 剪切选择内容<br>Ctrl + C 复制光标所在行 或 复制选择内容<br>Ctrl + D 复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）<br>Ctrl + W 递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）<br>Ctrl + E 显示最近打开的文件记录列表<br>Ctrl + N 根据输入的 类名 查找类文件<br>Ctrl + G 在当前文件跳转到指定行处<br>Ctrl + J 插入自定义动态代码模板<br>Ctrl + P 方法参数提示显示<br>Ctrl + Q 光标所在的变量 &#x2F; 类名 &#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容<br>Ctrl + U 前往当前光标所在的方法的父类的方法 &#x2F; 接口定义<br>Ctrl + B 进入光标所在的方法&#x2F;变量的接口或是定义处，等效于 Ctrl + 左键单击<br>Ctrl + K 版本控制提交项目，需要此项目有加入到版本控制才可用<br>Ctrl + T 版本控制更新项目，需要此项目有加入到版本控制才可用<br>Ctrl + H 显示当前类的层次结构<br>Ctrl + O 选择可重写的方法<br>Ctrl + I 选择可继承的方法<br>Ctrl + + 展开代码<br>Ctrl + - 折叠代码<br>Ctrl + &#x2F; 注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）<br>Ctrl + [ 移动光标到当前所在代码的花括号开始位置<br>Ctrl + ] 移动光标到当前所在代码的花括号结束位置<br>Ctrl + F1 在光标所在的错误代码处显示错误信息<br>Ctrl + F3 调转到所选中的词的下一个引用位置<br>Ctrl + F4 关闭当前编辑文件<br>Ctrl + F8 在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点<br>Ctrl + F9 执行 Make Project 操作<br>Ctrl + F11 选中文件 &#x2F; 文件夹，使用助记符设定 &#x2F; 取消书签<br>Ctrl + F12 弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选<br>Ctrl + Tab 编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口<br>Ctrl + Enter 智能分隔行<br>Ctrl + End 跳到文件尾<br>Ctrl + Home 跳到文件头<br>Ctrl + Space 基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 ALT+&#x2F;（必备）<br>Ctrl + Delete 删除光标后面的单词或是中文句<br>Ctrl + BackSpace 删除光标前面的单词或是中文句<br>Ctrl + 1,2,3…9 定位到对应数值的书签位置<br>Ctrl + 左键单击 在打开的文件标题上，弹出该文件路径<br>Ctrl + 光标定位 按 Ctrl 不要松开，会显示光标所在的类信息摘要<br>Ctrl + 左方向键 光标跳转到当前单词 &#x2F; 中文句的左侧开头位置<br>Ctrl + 右方向键 光标跳转到当前单词 &#x2F; 中文句的右侧开头位置<br>Ctrl + 前方向键 等效于鼠标滚轮向前效果<br>Ctrl + 后方向键 等效于鼠标滚轮向后效果</p><hr><h2 id="Alt相关"><a href="#Alt相关" class="headerlink" title="Alt相关"></a>Alt相关</h2><p>Alt + &#96; 显示版本控制常用操作菜单弹出层<br>Alt + Q 弹出一个提示，显示当前类的声明 &#x2F; 上下文信息<br>Alt + F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择<br>Alt + F2 对于前面页面，显示各类浏览器打开目标选择弹出层<br>Alt + F3 选中文本，逐个往下查找相同文本，并高亮显示<br>Alt + F7 查找光标所在的方法 &#x2F; 变量 &#x2F; 类被调用的地方<br>Alt + F8 在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果<br>Alt + Home 定位 &#x2F; 显示到当前文件的 Navigation Bar<br>Alt + Enter IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）<br>Alt + Insert 代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等（必备）<br>Alt + 左方向键 按左方向切换当前已打开的文件视图<br>Alt + 右方向键 按右方向切换当前已打开的文件视图<br>Alt + 前方向键 当前光标跳转到当前文件的前一个方法名位置<br>Alt + 后方向键 当前光标跳转到当前文件的后一个方法名位置<br>Alt + 1,2,3…9 显示对应数值的选项卡，其中 1 是 Project 用得最多</p><hr><h2 id="Shift相关"><a href="#Shift相关" class="headerlink" title="Shift相关"></a>Shift相关</h2><p>Shift + F1 如果有外部文档可以连接外部文档<br>Shift + F2 跳转到上一个高亮错误 或 警告位置<br>Shift + F3 在查找模式下，查找匹配上一个<br>Shift + F4 对当前打开的文件，使用新Windows窗口打开，旧窗口保留<br>Shift + F6 对文件 &#x2F; 文件夹 重命名<br>Shift + F7 在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法<br>Shift + F8 在 Debug 模式下，跳出，表现出来的效果跟 F9 一样<br>Shift + F9 等效于点击工具栏的 Debug 按钮<br>Shift + F10 等效于点击工具栏的 Run 按钮<br>Shift + F11 弹出书签显示层<br>Shift + Tab 取消缩进<br>Shift + ESC 隐藏当前 或 最后一个激活的工具窗口<br>Shift + End 选中光标到当前行尾位置<br>Shift + Home 选中光标到当前行头位置<br>Shift + Enter 开始新一行。光标所在行下空出一行，光标定位到新行位置<br>Shift + 左键单击 在打开的文件名上按此快捷键，可以关闭当前打开文件<br>Shift + 滚轮前后滚动 当前文件的横向滚动轴滚动</p><hr><h2 id="Ctrl-Alt相关"><a href="#Ctrl-Alt相关" class="headerlink" title="Ctrl + Alt相关"></a>Ctrl + Alt相关</h2><p>Ctrl + Alt + L 格式化代码，可以对当前文件和整个包目录使用 （必备）<br>Ctrl + Alt + O 优化导入的类，可以对当前文件和整个包目录使用 （必备）<br>Ctrl + Alt + I 光标所在行 或 选中部分进行自动代码缩进，有点类似格式化<br>Ctrl + Alt + T 对选中的代码弹出环绕选项弹出层<br>Ctrl + Alt + J 弹出模板选择窗口，将选定的代码加入动态模板中<br>Ctrl + Alt + H 调用层次<br>Ctrl + Alt + B 在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口<br>Ctrl + Alt + V 快速引进变量<br>Ctrl + Alt + Y 同步、刷新<br>Ctrl + Alt + S 打开 IntelliJ IDEA 系统设置<br>Ctrl + Alt + F7 显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来<br>Ctrl + Alt + F11 切换全屏模式<br>Ctrl + Alt + Enter 光标所在行上空出一行，光标定位到新行<br>Ctrl + Alt + Home 弹出跟当前文件有关联的文件弹出层<br>Ctrl + Alt + Space 类名自动完成<br>Ctrl + Alt + 左方向键 退回到上一个操作的地方 （必备）<br>Ctrl + Alt + 右方向键 前进到上一个操作的地方 （必备）<br>Ctrl + Alt + 前方向键 在查找模式下，跳到上个查找的文件<br>Ctrl + Alt + 后方向键 在查找模式下，跳到下个查找的文件</p><hr><h2 id="Alt-Shift相关"><a href="#Alt-Shift相关" class="headerlink" title="Alt + Shift相关"></a>Alt + Shift相关</h2><p>Alt + Shift + N 选择 &#x2F; 添加 task<br>Alt + Shift + F 显示添加到收藏夹弹出层 &#x2F; 添加到收藏夹<br>Alt + Shift + C 查看最近操作项目的变化情况列表<br>Alt + Shift + I 查看项目当前文件<br>Alt + Shift + F7 在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入<br>Alt + Shift + F9 弹出 Debug 的可选择菜单<br>Alt + Shift + F10 弹出 Run 的可选择菜单<br>Alt + Shift + 左键双击 选择被双击的单词 &#x2F; 中文句，按住不放，可以同时选择其他单词 &#x2F; 中文句<br>Alt + Shift + 前方向键 移动光标所在行向上移动<br>Alt + Shift + 后方向键 移动光标所在行向下移动</p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>F2 跳转到下一个高亮错误 或 警告位置 （必备）<br>F3 在查找模式下，定位到下一个匹配处<br>F4 编辑源<br>F7 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中<br>F8 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内<br>F9 在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上<br>F11 添加书签<br>F12 回到前一个工具窗口<br>Tab 缩进<br>ESC 从工具窗口进入代码文件窗口</p><p>Ctrl + Shift + Alt + V 无格式黏贴<br>Ctrl + Shift + Alt + N 前往指定的变量 &#x2F; 方法<br>Ctrl + Shift + Alt + S 打开当前项目设置<br>Ctrl + Shift + Alt + C 复制参考信息</p><hr><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><p>Ctrl + F12 弹出当前文件结构层(类的方法属性等)，可以在弹出的层上直接输入，进行筛选<br>Ctrl + 左键单击 在打开的文件标题上，弹出该文件路径<br>Ctrl + N 根据输入的 类名 查找类文件<br>Ctrl + D 复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面<br>Ctrl + P 方法参数提示显示<br>Ctrl + Alt + O 优化导入的类，可以对当前文件和整个包目录使用<br>Alt + Insert 代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等<br>Shift + F6 对文件 &#x2F; 文件夹 重命名<br>Ctrl + Shift + Enter 自动结束代码，行末自动添加分号<br>Ctrl + B 找变量、方法、类等的来源或者使用过的地方<br>Ctrl + Alt + B 在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口<br>Ctrl + Q 光标所在的变量 &#x2F; 类名 &#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容<br>Ctrl + Alt + T 对选中的代码弹出环绕选项弹出层(try，if等语句包裹)<br>Ctrl + Alt + L 格式化代码，可以对当前文件和整个包目录使用<br>Ctrl + Alt + 左方向键 退回到上一个操作的地方<br>Ctrl + Alt + 右方向键 前进到上一个操作的地方<br>Ctrl + Shift + J 自动将下一行合并到当前行末尾<br>Alt + F8 在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果<br>连按两次Shift 弹出 Search Everywhere 弹出层</p><p>Alt + F7 查找光标所在的方法 &#x2F; 变量 &#x2F; 类被调用的地方<br>Ctrl + Alt + F7 显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</p><p>Ctrl + F 在当前文件进行文本查找<br>Ctrl + Shift + F 根据输入内容查找整个项目 或 指定目录内文件</p><p>Ctrl + R 在当前文件进行文本替换<br>Ctrl + Shift + R 根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</p><p>Ctrl + H 显示当前类的层次结构<br>Ctrl + Alt + H 调用层次<br>Ctrl + Shift + H 显示方法层次结构</p><p>Ctrl + W 递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围<br>Ctrl + Shift + W 递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</p><p>Ctrl + [ 移动光标到当前所在代码的花括号开始位置<br>Ctrl + ] 移动光标到当前所在代码的花括号结束位置<br>Ctrl + Shift + [ 选中从光标所在位置到它的顶部中括号位置<br>Ctrl + Shift + ] 选中从光标所在位置到它的底部中括号位置</p><p>Ctrl + O 选择可重写的方法<br>Ctrl + I 选择可实现的方法<br>Ctrl + Y 删除光标所在行 或 删除选中的行<br>Ctrl + X 剪切光标所在行 或 剪切选择内容<br>Ctrl + G 在当前文件跳转到指定行处<br>Ctrl + Q 光标所在的变量 &#x2F; 类名 &#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容<br>Ctrl + U 前往当前光标所在的方法的父类的方法 &#x2F; 接口定义<br>Ctrl + End 跳到文件尾<br>Ctrl + Home 跳到文件头</p><p>Alt + &#96; 显示版本控制常用操作菜单弹出层<br>Alt + Enter 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</p><p>Shift + ESC 隐藏当前 或 最后一个激活的工具窗口<br>Shift + End 选中光标到当前行尾位置<br>Shift + Home 选中光标到当前行头位置<br>Shift + Enter 开始新一行。光标所在行下空出一行，光标定位到新行位置<br>Shift + 左键单击 在打开的文件名上按此快捷键，可以关闭当前打开文件</p><p>Ctrl + Alt + I 光标所在行 或 选中部分进行自动代码缩进，有点类似格式化<br>Ctrl + Alt + Space 类名自动完成</p><p>Ctrl + Shift + N 通过文件名定位 &#x2F; 打开文件 &#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠<br>Ctrl + Shift + U 对选中的代码进行大 &#x2F; 小写轮流转换<br>Ctrl + Shift + &#x2F; 代码块注释<br>Ctrl + Shift + Backspace 退回到上次修改的地方<br>Ctrl + Shift + F12 编辑器最大化<br>Ctrl + Shift + 左键单击 把光标放在某个类变量上，按此快捷键可以直接定位到该类中</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM调优指令手册</title>
      <link href="/2024/01/03/JVM%E8%B0%83%E4%BC%98%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
      <url>/2024/01/03/JVM%E8%B0%83%E4%BC%98%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="栈和局部变量操作"><a href="#栈和局部变量操作" class="headerlink" title="栈和局部变量操作"></a>栈和局部变量操作</h2><h3 id="将常量压入栈的指令"><a href="#将常量压入栈的指令" class="headerlink" title="将常量压入栈的指令"></a>将常量压入栈的指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">aconst_null 将null对象引用压入栈 </span><br><span class="line"></span><br><span class="line">iconst_m1 将int类型常量-1压入栈 </span><br><span class="line"></span><br><span class="line">iconst_0 将int类型常量0压入栈 </span><br><span class="line"></span><br><span class="line">iconst_1 将int类型常量1压入栈 </span><br><span class="line"></span><br><span class="line">iconst_2 将int类型常量2压入栈 </span><br><span class="line"></span><br><span class="line">iconst_3 将int类型常量3压入栈 </span><br><span class="line"></span><br><span class="line">iconst_4 将int类型常量4压入栈 </span><br><span class="line"></span><br><span class="line">iconst_5 将int类型常量5压入栈 </span><br><span class="line"></span><br><span class="line">lconst_0 将long类型常量0压入栈 </span><br><span class="line"></span><br><span class="line">lconst_1 将long类型常量1压入栈 </span><br><span class="line"></span><br><span class="line">fconst_0 将float类型常量0压入栈 </span><br><span class="line"></span><br><span class="line">fconst_1 将float类型常量1压入栈 </span><br><span class="line"></span><br><span class="line">dconst_0 将double类型常量0压入栈 </span><br><span class="line"></span><br><span class="line">dconst_1 将double类型常量1压入栈 </span><br><span class="line"></span><br><span class="line">bipush 将一个8位带符号整数压入栈 </span><br><span class="line"></span><br><span class="line">sipush 将16位带符号整数压入栈 </span><br><span class="line"></span><br><span class="line">ldc 把常量池中的项压入栈 </span><br><span class="line"></span><br><span class="line">ldc_w 把常量池中的项压入栈（使用宽索引） </span><br><span class="line"></span><br><span class="line">ldc2_w 把常量池中long类型或者double类型的项压入栈（使用宽索引） </span><br><span class="line"></span><br><span class="line">从栈中的局部变量中装载值的指令 </span><br><span class="line"></span><br><span class="line">iload 从局部变量中装载int类型值 </span><br><span class="line"></span><br><span class="line">lload 从局部变量中装载long类型值 </span><br><span class="line"></span><br><span class="line">fload 从局部变量中装载float类型值 </span><br><span class="line"></span><br><span class="line">dload 从局部变量中装载double类型值 </span><br><span class="line"></span><br><span class="line">aload 从局部变量中装载引用类型值（refernce） </span><br><span class="line"></span><br><span class="line">iload_0 从局部变量0中装载int类型值 </span><br><span class="line"></span><br><span class="line">iload_1 从局部变量1中装载int类型值 </span><br><span class="line"></span><br><span class="line">iload_2 从局部变量2中装载int类型值 </span><br><span class="line"></span><br><span class="line">iload_3 从局部变量3中装载int类型值 </span><br><span class="line"></span><br><span class="line">lload_0 从局部变量0中装载long类型值 </span><br><span class="line"></span><br><span class="line">lload_1 从局部变量1中装载long类型值 </span><br><span class="line"></span><br><span class="line">lload_2 从局部变量2中装载long类型值 </span><br><span class="line"></span><br><span class="line">lload_3 从局部变量3中装载long类型值 </span><br><span class="line"></span><br><span class="line">fload_0 从局部变量0中装载float类型值 </span><br><span class="line"></span><br><span class="line">fload_1 从局部变量1中装载float类型值fload_2 从局部变量2中装载float类型值 </span><br><span class="line"></span><br><span class="line">fload_3 从局部变量3中装载float类型值 </span><br><span class="line"></span><br><span class="line">dload_0 从局部变量0中装载double类型值 </span><br><span class="line"></span><br><span class="line">dload_1 从局部变量1中装载double类型值 </span><br><span class="line"></span><br><span class="line">dload_2 从局部变量2中装载double类型值 </span><br><span class="line"></span><br><span class="line">dload_3 从局部变量3中装载double类型值 </span><br><span class="line"></span><br><span class="line">aload_0 从局部变量0中装载引用类型值 </span><br><span class="line"></span><br><span class="line">aload_1 从局部变量1中装载引用类型值 </span><br><span class="line"></span><br><span class="line">aload_2 从局部变量2中装载引用类型值 </span><br><span class="line"></span><br><span class="line">aload_3 从局部变量3中装载引用类型值 </span><br><span class="line"></span><br><span class="line">iaload 从数组中装载int类型值 </span><br><span class="line"></span><br><span class="line">laload 从数组中装载long类型值 </span><br><span class="line"></span><br><span class="line">faload 从数组中装载float类型值 </span><br><span class="line"></span><br><span class="line">daload 从数组中装载double类型值 </span><br><span class="line"></span><br><span class="line">aaload 从数组中装载引用类型值 </span><br><span class="line"></span><br><span class="line">baload 从数组中装载byte类型或boolean类型值 </span><br><span class="line"></span><br><span class="line">caload 从数组中装载char类型值 </span><br><span class="line"></span><br><span class="line">saload 从数组中装载short类型值 </span><br><span class="line"></span><br><span class="line">将栈中的值存入局部变量的指令 </span><br><span class="line"></span><br><span class="line">istore 将int类型值存入局部变量 </span><br><span class="line"></span><br><span class="line">lstore 将long类型值存入局部变量 </span><br><span class="line"></span><br><span class="line">fstore 将float类型值存入局部变量 </span><br><span class="line"></span><br><span class="line">dstore 将double类型值存入局部变量 </span><br><span class="line"></span><br><span class="line">astore 将将引用类型或returnAddress类型值存入局部变量 </span><br><span class="line"></span><br><span class="line">istore_0 将int类型值存入局部变量0 </span><br><span class="line"></span><br><span class="line">istore_1 将int类型值存入局部变量1 </span><br><span class="line"></span><br><span class="line">istore_2 将int类型值存入局部变量2 </span><br><span class="line"></span><br><span class="line">istore_3 将int类型值存入局部变量3 </span><br><span class="line"></span><br><span class="line">lstore_0 将long类型值存入局部变量0 </span><br><span class="line"></span><br><span class="line">lstore_1 将long类型值存入局部变量1 </span><br><span class="line"></span><br><span class="line">lstore_2 将long类型值存入局部变量2 </span><br><span class="line"></span><br><span class="line">lstore_3 将long类型值存入局部变量3 </span><br><span class="line"></span><br><span class="line">fstore_0 将float类型值存入局部变量0 </span><br><span class="line"></span><br><span class="line">fstore_1 将float类型值存入局部变量1 </span><br><span class="line"></span><br><span class="line">fstore_2 将float类型值存入局部变量2 </span><br><span class="line"></span><br><span class="line">fstore_3 将float类型值存入局部变量3 </span><br><span class="line"></span><br><span class="line">dstore_0 将double类型值存入局部变量0 </span><br><span class="line"></span><br><span class="line">dstore_1 将double类型值存入局部变量1dstore_2 将double类型值存入局部变量2 </span><br><span class="line"></span><br><span class="line">dstore_3 将double类型值存入局部变量3 </span><br><span class="line"></span><br><span class="line">astore_0 将引用类型或returnAddress类型值存入局部变量0 </span><br><span class="line"></span><br><span class="line">astore_1 将引用类型或returnAddress类型值存入局部变量1 </span><br><span class="line"></span><br><span class="line">astore_2 将引用类型或returnAddress类型值存入局部变量2 </span><br><span class="line"></span><br><span class="line">astore_3 将引用类型或returnAddress类型值存入局部变量3 </span><br><span class="line"></span><br><span class="line">iastore 将int类型值存入数组中 </span><br><span class="line"></span><br><span class="line">lastore 将long类型值存入数组中 </span><br><span class="line"></span><br><span class="line">fastore 将float类型值存入数组中 </span><br><span class="line"></span><br><span class="line">dastore 将double类型值存入数组中 </span><br><span class="line"></span><br><span class="line">aastore 将引用类型值存入数组中 </span><br><span class="line"></span><br><span class="line">bastore 将byte类型或者boolean类型值存入数组中 </span><br><span class="line"></span><br><span class="line">castore 将char类型值存入数组中 </span><br><span class="line"></span><br><span class="line">sastore 将short类型值存入数组中 </span><br><span class="line"></span><br><span class="line">wide指令 </span><br><span class="line"></span><br><span class="line">wide 使用附加字节扩展局部变量索引 </span><br></pre></td></tr></table></figure><h3 id="通用-无类型）栈操作"><a href="#通用-无类型）栈操作" class="headerlink" title="通用(无类型）栈操作"></a>通用(无类型）栈操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">nop 不做任何操作 </span><br><span class="line"></span><br><span class="line">pop 弹出栈顶端一个字长的内容 </span><br><span class="line"></span><br><span class="line">pop2 弹出栈顶端两个字长的内容 </span><br><span class="line"></span><br><span class="line">dup 复制栈顶部一个字长内容 </span><br><span class="line"></span><br><span class="line">dup_x1 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的两个字长的内容压入 </span><br><span class="line"></span><br><span class="line">栈</span><br><span class="line"></span><br><span class="line">dup_x2 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入 </span><br><span class="line"></span><br><span class="line">栈</span><br><span class="line"></span><br><span class="line">dup2 复制栈顶部两个字长内容 </span><br><span class="line"></span><br><span class="line">dup2_x1 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入 </span><br><span class="line"></span><br><span class="line">栈</span><br><span class="line"></span><br><span class="line">dup2_x2 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的四个字长的内容压入 </span><br><span class="line"></span><br><span class="line">栈</span><br><span class="line"></span><br><span class="line">swap 交换栈顶部两个字长内容 </span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">i2l 把int类型的数据转化为long类型 </span><br><span class="line"></span><br><span class="line">i2f 把int类型的数据转化为float类型 </span><br><span class="line"></span><br><span class="line">i2d 把int类型的数据转化为double类型 </span><br><span class="line"></span><br><span class="line">l2i 把long类型的数据转化为int类型 </span><br><span class="line"></span><br><span class="line">l2f 把long类型的数据转化为float类型 </span><br><span class="line"></span><br><span class="line">l2d 把long类型的数据转化为double类型f2i 把float类型的数据转化为int类型 </span><br><span class="line"></span><br><span class="line">f2l 把float类型的数据转化为long类型 </span><br><span class="line"></span><br><span class="line">f2d 把float类型的数据转化为double类型 </span><br><span class="line"></span><br><span class="line">d2i 把double类型的数据转化为int类型 </span><br><span class="line"></span><br><span class="line">d2l 把double类型的数据转化为long类型 </span><br><span class="line"></span><br><span class="line">d2f 把double类型的数据转化为float类型 </span><br><span class="line"></span><br><span class="line">i2b 把int类型的数据转化为byte类型 </span><br><span class="line"></span><br><span class="line">i2c 把int类型的数据转化为char类型 </span><br><span class="line"></span><br><span class="line">i2s 把int类型的数据转化为short类型</span><br></pre></td></tr></table></figure><h3 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">iadd 执行int类型的加法 </span><br><span class="line"></span><br><span class="line">ladd 执行long类型的加法 </span><br><span class="line"></span><br><span class="line">isub 执行int类型的减法 </span><br><span class="line"></span><br><span class="line">lsub 执行long类型的减法 </span><br><span class="line"></span><br><span class="line">imul 执行int类型的乘法 </span><br><span class="line"></span><br><span class="line">lmul 执行long类型的乘法 </span><br><span class="line"></span><br><span class="line">idiv 执行int类型的除法 </span><br><span class="line"></span><br><span class="line">ldiv 执行long类型的除法 </span><br><span class="line"></span><br><span class="line">irem 计算int类型除法的余数 </span><br><span class="line"></span><br><span class="line">lrem 计算long类型除法的余数 </span><br><span class="line"></span><br><span class="line">ineg 对一个int类型值进行取反操作 </span><br><span class="line"></span><br><span class="line">lneg 对一个long类型值进行取反操作 </span><br><span class="line"></span><br><span class="line">iinc 把一个常量值加到一个int类型的局部变量上 </span><br></pre></td></tr></table></figure><hr><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><h3 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">ishl 执行int类型的向左移位操作 </span><br><span class="line"></span><br><span class="line">lshl 执行long类型的向左移位操作 </span><br><span class="line"></span><br><span class="line">ishr 执行int类型的向右移位操作 </span><br><span class="line"></span><br><span class="line">lshr 执行long类型的向右移位操作 </span><br><span class="line"></span><br><span class="line">iushr 执行int类型的向右逻辑移位操作 </span><br><span class="line"></span><br><span class="line">lushr 执行long类型的向右逻辑移位操作 </span><br><span class="line"></span><br><span class="line">按位布尔运算 </span><br><span class="line"></span><br><span class="line">iand 对int类型值进行“逻辑与”操作 </span><br><span class="line"></span><br><span class="line">land 对long类型值进行“逻辑与”操作 </span><br><span class="line"></span><br><span class="line">ior 对int类型值进行“逻辑或”操作 </span><br><span class="line"></span><br><span class="line">lor 对long类型值进行“逻辑或”操作 </span><br><span class="line"></span><br><span class="line">ixor 对int类型值进行“逻辑异或”操作 </span><br><span class="line"></span><br><span class="line">lxor 对long类型值进行“逻辑异或”操作浮点运算 </span><br><span class="line"></span><br><span class="line">fadd 执行float类型的加法 </span><br><span class="line"></span><br><span class="line">dadd 执行double类型的加法 </span><br><span class="line"></span><br><span class="line">fsub 执行float类型的减法 </span><br><span class="line"></span><br><span class="line">dsub 执行double类型的减法 </span><br><span class="line"></span><br><span class="line">fmul 执行float类型的乘法 </span><br><span class="line"></span><br><span class="line">dmul 执行double类型的乘法 </span><br><span class="line"></span><br><span class="line">fdiv 执行float类型的除法 </span><br><span class="line"></span><br><span class="line">ddiv 执行double类型的除法 </span><br><span class="line"></span><br><span class="line">frem 计算float类型除法的余数 </span><br><span class="line"></span><br><span class="line">drem 计算double类型除法的余数 </span><br><span class="line"></span><br><span class="line">fneg 将一个float类型的数值取反 </span><br><span class="line"></span><br><span class="line">dneg 将一个double类型的数值取反 </span><br></pre></td></tr></table></figure><hr><h2 id="对象和数组"><a href="#对象和数组" class="headerlink" title="对象和数组"></a>对象和数组</h2><h3 id="对象操作指令"><a href="#对象操作指令" class="headerlink" title="对象操作指令"></a>对象操作指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">new 创建一个新对象 </span><br><span class="line"></span><br><span class="line">checkcast 确定对象为所给定的类型 </span><br><span class="line"></span><br><span class="line">getfield 从对象中获取字段 </span><br><span class="line"></span><br><span class="line">putfield 设置对象中字段的值 </span><br><span class="line"></span><br><span class="line">getstatic 从类中获取静态字段 </span><br><span class="line"></span><br><span class="line">putstatic 设置类中静态字段的值 </span><br><span class="line"></span><br><span class="line">instanceof 判断对象是否为给定的类型 </span><br></pre></td></tr></table></figure><h3 id="数组操作指令"><a href="#数组操作指令" class="headerlink" title="数组操作指令"></a>数组操作指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">newarray 分配数据成员类型为基本上数据类型的新数组 </span><br><span class="line"></span><br><span class="line">anewarray 分配数据成员类型为引用类型的新数组 </span><br><span class="line"></span><br><span class="line">arraylength 获取数组长度 </span><br><span class="line"></span><br><span class="line">multianewarray 分配新的多维数组 </span><br></pre></td></tr></table></figure><hr><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="条件分支指令"><a href="#条件分支指令" class="headerlink" title="条件分支指令"></a>条件分支指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ifeq 如果等于0，则跳转 </span><br><span class="line"></span><br><span class="line">ifne 如果不等于0，则跳转 </span><br><span class="line"></span><br><span class="line">iflt 如果小于0，则跳转 </span><br><span class="line"></span><br><span class="line">ifge 如果大于等于0，则跳转 </span><br><span class="line"></span><br><span class="line">ifgt 如果大于0，则跳转 </span><br><span class="line"></span><br><span class="line">ifle 如果小于等于0，则跳转 </span><br><span class="line"></span><br><span class="line">if_icmpcq 如果两个int值相等，则跳转 </span><br><span class="line"></span><br><span class="line">if_icmpne 如果两个int类型值不相等，则跳转 </span><br><span class="line"></span><br><span class="line">if_icmplt 如果一个int类型值小于另外一个int类型值，则跳转if_icmpge 如果一个int类型值大于或者等于另外一个int类型值，则跳转 </span><br><span class="line"></span><br><span class="line">if_icmpgt 如果一个int类型值大于另外一个int类型值，则跳转 </span><br><span class="line"></span><br><span class="line">if_icmple 如果一个int类型值小于或者等于另外一个int类型值，则跳转 </span><br><span class="line"></span><br><span class="line">ifnull 如果等于null，则跳转 </span><br><span class="line"></span><br><span class="line">ifnonnull 如果不等于null，则跳转 </span><br><span class="line"></span><br><span class="line">if_acmpeq 如果两个对象引用相等，则跳转 </span><br><span class="line"></span><br><span class="line">if_acmpnc 如果两个对象引用不相等，则跳转 </span><br></pre></td></tr></table></figure><h3 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lcmp 比较long类型值 </span><br><span class="line"></span><br><span class="line">fcmpl 比较float类型值（当遇到NaN时，返回-1） </span><br><span class="line"></span><br><span class="line">fcmpg 比较float类型值（当遇到NaN时，返回1） </span><br><span class="line"></span><br><span class="line">dcmpl 比较double类型值（当遇到NaN时，返回-1） </span><br><span class="line"></span><br><span class="line">dcmpg 比较double类型值（当遇到NaN时，返回1）</span><br></pre></td></tr></table></figure><h3 id="无条件转移指令"><a href="#无条件转移指令" class="headerlink" title="无条件转移指令"></a>无条件转移指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">goto 无条件跳转 </span><br><span class="line"></span><br><span class="line">goto_w 无条件跳转（宽索引） </span><br></pre></td></tr></table></figure><h3 id="表跳转指令"><a href="#表跳转指令" class="headerlink" title="表跳转指令"></a>表跳转指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tableswitch 通过索引访问跳转表，并跳转 </span><br><span class="line"></span><br><span class="line">lookupswitch 通过键值匹配访问跳转表，并执行跳转操作 </span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">athrow 抛出异常或错误 </span><br><span class="line"></span><br><span class="line">finally子句 </span><br><span class="line"></span><br><span class="line">jsr 跳转到子例程 </span><br><span class="line"></span><br><span class="line">jsr_w 跳转到子例程（宽索引） </span><br><span class="line"></span><br><span class="line">rct 从子例程返回 </span><br></pre></td></tr></table></figure><hr><h2 id="方法调用与返回"><a href="#方法调用与返回" class="headerlink" title="方法调用与返回"></a>方法调用与返回</h2><h3 id="方法调用指令"><a href="#方法调用指令" class="headerlink" title="方法调用指令"></a>方法调用指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">invokcvirtual 运行时按照对象的类来调用实例方法 </span><br><span class="line"></span><br><span class="line">invokespecial 根据编译时类型来调用实例方法 </span><br><span class="line"></span><br><span class="line">invokestatic 调用类（静态）方法 </span><br><span class="line"></span><br><span class="line">invokcinterface 调用接口方法 </span><br></pre></td></tr></table></figure><h3 id="方法返回指令"><a href="#方法返回指令" class="headerlink" title="方法返回指令"></a>方法返回指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ireturn 从方法中返回int类型的数据 </span><br><span class="line"></span><br><span class="line">lreturn 从方法中返回long类型的数据 </span><br><span class="line"></span><br><span class="line">freturn 从方法中返回float类型的数据 </span><br><span class="line"></span><br><span class="line">dreturn 从方法中返回double类型的数据 </span><br><span class="line"></span><br><span class="line">areturn 从方法中返回引用类型的数据 </span><br><span class="line"></span><br><span class="line">return 从方法中返回，返回值为void线程同步 </span><br><span class="line"></span><br><span class="line">montiorenter 进入并获取对象监视器 </span><br><span class="line"></span><br><span class="line">monitorexit 释放并退出对象监视器 </span><br></pre></td></tr></table></figure><h3 id="JVM指令助记符"><a href="#JVM指令助记符" class="headerlink" title="JVM指令助记符"></a>JVM指令助记符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">变量到操作数栈：iload,iload_,lload,lload_,fload,fload_,dload,dload_,aload,aload_ </span><br><span class="line"></span><br><span class="line">操作数栈到变量： </span><br><span class="line"></span><br><span class="line">istore,istore_,lstore,lstore_,fstore,fstore_,dstore,dstor_,astore,astore_ </span><br><span class="line"></span><br><span class="line">常数到操作数栈： </span><br><span class="line"></span><br><span class="line">bipush,sipush,ldc,ldc_w,ldc2_w,aconst_null,iconst_ml,iconst_,lconst_,fconst_,dconst_ </span><br><span class="line"></span><br><span class="line">加：iadd,ladd,fadd,dadd </span><br><span class="line"></span><br><span class="line">减：isub,lsub,fsub,dsub </span><br><span class="line"></span><br><span class="line">乘：imul,lmul,fmul,dmul </span><br><span class="line"></span><br><span class="line">除：idiv,ldiv,fdiv,ddiv </span><br><span class="line"></span><br><span class="line">余数：irem,lrem,frem,drem </span><br><span class="line"></span><br><span class="line">取负：ineg,lneg,fneg,dneg </span><br><span class="line"></span><br><span class="line">移位：ishl,lshr,iushr,lshl,lshr,lushr </span><br><span class="line"></span><br><span class="line">按位或：ior,lor </span><br><span class="line"></span><br><span class="line">按位与：iand,land </span><br><span class="line"></span><br><span class="line">按位异或：ixor,lxor </span><br><span class="line"></span><br><span class="line">类型转换：i2l,i2f,i2d,l2f,l2d,f2d(放宽数值转换) </span><br><span class="line"></span><br><span class="line">i2b,i2c,i2s,l2i,f2i,f2l,d2i,d2l,d2f(缩窄数值转换) </span><br><span class="line"></span><br><span class="line">创建类实便：new </span><br><span class="line"></span><br><span class="line">创建新数组：newarray,anewarray,multianwarray </span><br><span class="line"></span><br><span class="line">访问类的域和类实例域：getfield,putfield,getstatic,putstatic </span><br><span class="line"></span><br><span class="line">把数据装载到操作数栈：baload,caload,saload,iaload,laload,faload,daload,aaload </span><br><span class="line"></span><br><span class="line">从操作数栈存存储到数组： </span><br><span class="line"></span><br><span class="line">bastore,castore,sastore,iastore,lastore,fastore,dastore,aastore </span><br><span class="line"></span><br><span class="line">获取数组长度：arraylength </span><br><span class="line"></span><br><span class="line">检相类实例或数组属性：instanceof,checkcast </span><br><span class="line"></span><br><span class="line">操作数栈管理：pop,pop2,dup,dup2,dup_xl,dup2_xl,dup_x2,dup2_x2,swap </span><br><span class="line"></span><br><span class="line">有条件转移：ifeq,iflt,ifle,ifne,ifgt,ifge,ifnull,ifnonnull,if_icmpeq,if_icmpene, </span><br><span class="line"></span><br><span class="line">if_icmplt,if_icmpgt,if_icmple,if_icmpge,if_acmpeq,if_acmpne,lcmp,fcmpl </span><br><span class="line"></span><br><span class="line">fcmpg,dcmpl,dcmpg </span><br><span class="line"></span><br><span class="line">复合条件转移：tableswitch,lookupswitch </span><br><span class="line"></span><br><span class="line">无条件转移：goto,goto_w,jsr,jsr_w,ret </span><br><span class="line"></span><br><span class="line">调度对象的实便方法：invokevirtual </span><br><span class="line"></span><br><span class="line">调用由接口实现的方法：invokeinterface </span><br><span class="line"></span><br><span class="line">调用需要特殊处理的实例方法：invokespecial调用命名类中的静态方法：invokestatic </span><br><span class="line"></span><br><span class="line">方法返回：ireturn,lreturn,freturn,dreturn,areturn,return </span><br><span class="line"></span><br><span class="line">异常：athrow </span><br><span class="line"></span><br><span class="line">finally关键字的实现使用：jsr,jsr_w,ret</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java空指针异常解决方案</title>
      <link href="/2024/01/03/java%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2024/01/03/java%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我相信有不少小伙伴在写代码的过程中经常会遇到空指针异常【java.lang.NullPointerException: null】，根据我个人的开发经验分享下如何避免空指针异常</p><h2 id="异常原因"><a href="#异常原因" class="headerlink" title="异常原因"></a>异常原因</h2><p>其实原因很简单，就是由于你所创建的对象为Null或者你创建的对象实例被重新赋值为Null了，然后代码执行过程中去调用另一个函数方法造成的</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>既然知道是什么原因造成的。首先从打印日志定位抛出空指针异常的代码位置，随后可以在代码里面利用debug模式在此位置打个断点，哪个对象为Null自然一目了然了。</p><h2 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h2><p>既然空指针异常是由于空对象造成的，那么我们顺着这个思路是不是应该判断对象不为Null才执行对应的业务逻辑操作。所以对象判空在代码里是非常关键的，也希望大家能养成这个好习惯，提高代码的质量。我个人一般在项目中习惯用org.springframework.util.ObjectUtils这个工具类的isEmpty()方法就可以完美避免啦。如果是数据集合的话，可以利用org.springframework.util.CollectionUtils工具类的isEmpty()方法。不得不说spring框架的工具类还是挺好用的。当然你也可以自己封装一套对象判空方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解决问题就像打怪升级一样，问题解决得越多我们自身能力就会变得越强大。问题并不可怕，可怕的是遇到问题没有解决思路。希望此文章对你能够有一丢丢的帮助。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下java生产环境CPU占用过高实例</title>
      <link href="/2024/01/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bjava%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83CPU%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E5%AE%9E%E4%BE%8B/"/>
      <url>/2024/01/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bjava%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83CPU%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天还是像往常一样下班后坐公交车回家，突然工作微信群里发来一个截图，我点开一看是我之前上线的服务占用CPU过高了导致程序直接卡死。记录分享一下我的解决思路希望可以帮到你们。</p></blockquote><hr><h3 id="1-先查看监控里每个逻辑cpu情况"><a href="#1-先查看监控里每个逻辑cpu情况" class="headerlink" title="1. 先查看监控里每个逻辑cpu情况"></a><strong>1. 先查看监控里每个逻辑cpu情况</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行命令：top</span><br></pre></td></tr></table></figure><img src="/2024/01/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bjava%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83CPU%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E5%AE%9E%E4%BE%8B/0a7ecddcc48f4cddad8cc714895f06f5.png" class=""><h3 id="2-查看进程jvm虚拟机堆使用情况"><a href="#2-查看进程jvm虚拟机堆使用情况" class="headerlink" title="2. 查看进程jvm虚拟机堆使用情况"></a><strong>2. 查看进程jvm虚拟机堆使用情况</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行命令：jmap -heap 28292</span><br></pre></td></tr></table></figure><img src="/2024/01/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bjava%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83CPU%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E5%AE%9E%E4%BE%8B/4c1d8f73baac45c99f22b03f45124dea.png" class=""><h3 id="3-打印最近一次GC情况"><a href="#3-打印最近一次GC情况" class="headerlink" title="3. 打印最近一次GC情况"></a><strong>3. 打印最近一次GC情况</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行命令：jstat -gcutil 28292</span><br></pre></td></tr></table></figure><img src="/2024/01/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bjava%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83CPU%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E5%AE%9E%E4%BE%8B/8e9af51e348f4b11baa1782e09e589d1.png" class=""><h3 id="4-查看java哪个线程cpu占用高"><a href="#4-查看java哪个线程cpu占用高" class="headerlink" title="4. 查看java哪个线程cpu占用高"></a><strong>4. 查看java哪个线程cpu占用高</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行命令：top -H -p 28292</span><br></pre></td></tr></table></figure><img src="/2024/01/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bjava%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83CPU%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E5%AE%9E%E4%BE%8B/83db0396d06543fbbc15a92372470246.png" class=""><h3 id="5-确定线程id，再通过命令计算十六进制值"><a href="#5-确定线程id，再通过命令计算十六进制值" class="headerlink" title="5. 确定线程id，再通过命令计算十六进制值"></a><strong>5. 确定线程id，再通过命令计算十六进制值</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行命令：printf &quot;%x\n&quot; 28329</span><br></pre></td></tr></table></figure><img src="/2024/01/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bjava%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83CPU%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E5%AE%9E%E4%BE%8B/9897e2d22d894603bf8a0610b70c86e5.png" class=""><h3 id="6-打印该线程堆栈内容"><a href="#6-打印该线程堆栈内容" class="headerlink" title="6. 打印该线程堆栈内容"></a><strong>6. 打印该线程堆栈内容</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行命令：jstack 28292 | grep 6ea9 -A 100</span><br></pre></td></tr></table></figure><img src="/2024/01/03/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bjava%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83CPU%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E5%AE%9E%E4%BE%8B/ff697731db264f39bdd8438201f192c2.png" class=""><p>至此，根据截图里面的错误信息基本就可以定义到具体代码类的位置了。</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bito操作手册</title>
      <link href="/2024/01/03/bito%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
      <url>/2024/01/03/bito%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="一：输入网站"><a href="#一：输入网站" class="headerlink" title="一：输入网站"></a>一：输入网站</h3><p><a href="https://alpha.bito.co/bitoai/">https://alpha.bito.co/bitoai/</a></p><h3 id="二：填写邮箱"><a href="#二：填写邮箱" class="headerlink" title="二：填写邮箱"></a>二：填写邮箱</h3><img src="/2024/01/03/bito%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/image-20230612094550898.png" class=""><h3 id="三：登录邮箱，获取验证码"><a href="#三：登录邮箱，获取验证码" class="headerlink" title="三：登录邮箱，获取验证码"></a>三：登录邮箱，获取验证码</h3><img src="/2024/01/03/bito%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/image-20230612095204529.png" class=""><h3 id="四：填写验证码"><a href="#四：填写验证码" class="headerlink" title="四：填写验证码"></a>四：填写验证码</h3><img src="/2024/01/03/bito%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/image-20230612094908035.png" class=""><img src="/2024/01/03/bito%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/image-20230612095249223.png" class=""><h3 id="五：完成"><a href="#五：完成" class="headerlink" title="五：完成"></a>五：完成</h3><img src="/2024/01/03/bito%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/image-20230612095339984.png" class="">]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
